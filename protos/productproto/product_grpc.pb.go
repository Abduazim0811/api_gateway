// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: protos/productproto/product.proto

package productproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Products_CreateProduct_FullMethodName  = "/Products/CreateProduct"
	Products_GetbyIdProduct_FullMethodName = "/Products/GetbyIdProduct"
	Products_GetAllProducts_FullMethodName = "/Products/GetAllProducts"
	Products_UpdateProduct_FullMethodName  = "/Products/UpdateProduct"
	Products_DeleteProduct_FullMethodName  = "/Products/DeleteProduct"
)

// ProductsClient is the client API for Products service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductsClient interface {
	CreateProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	GetbyIdProduct(ctx context.Context, in *CreateProductResponse, opts ...grpc.CallOption) (*Product, error)
	GetAllProducts(ctx context.Context, in *ProductEmpty, opts ...grpc.CallOption) (Products_GetAllProductsClient, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	DeleteProduct(ctx context.Context, in *CreateProductResponse, opts ...grpc.CallOption) (*ProductResponse, error)
}

type productsClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsClient(cc grpc.ClientConnInterface) ProductsClient {
	return &productsClient{cc}
}

func (c *productsClient) CreateProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, Products_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetbyIdProduct(ctx context.Context, in *CreateProductResponse, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, Products_GetbyIdProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetAllProducts(ctx context.Context, in *ProductEmpty, opts ...grpc.CallOption) (Products_GetAllProductsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Products_ServiceDesc.Streams[0], Products_GetAllProducts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &productsGetAllProductsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Products_GetAllProductsClient interface {
	Recv() (*Product, error)
	grpc.ClientStream
}

type productsGetAllProductsClient struct {
	grpc.ClientStream
}

func (x *productsGetAllProductsClient) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productsClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, Products_UpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) DeleteProduct(ctx context.Context, in *CreateProductResponse, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, Products_DeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductsServer is the server API for Products service.
// All implementations must embed UnimplementedProductsServer
// for forward compatibility
type ProductsServer interface {
	CreateProduct(context.Context, *ProductRequest) (*CreateProductResponse, error)
	GetbyIdProduct(context.Context, *CreateProductResponse) (*Product, error)
	GetAllProducts(*ProductEmpty, Products_GetAllProductsServer) error
	UpdateProduct(context.Context, *UpdateProductRequest) (*ProductResponse, error)
	DeleteProduct(context.Context, *CreateProductResponse) (*ProductResponse, error)
	mustEmbedUnimplementedProductsServer()
}

// UnimplementedProductsServer must be embedded to have forward compatible implementations.
type UnimplementedProductsServer struct {
}

func (UnimplementedProductsServer) CreateProduct(context.Context, *ProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductsServer) GetbyIdProduct(context.Context, *CreateProductResponse) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetbyIdProduct not implemented")
}
func (UnimplementedProductsServer) GetAllProducts(*ProductEmpty, Products_GetAllProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllProducts not implemented")
}
func (UnimplementedProductsServer) UpdateProduct(context.Context, *UpdateProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductsServer) DeleteProduct(context.Context, *CreateProductResponse) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductsServer) mustEmbedUnimplementedProductsServer() {}

// UnsafeProductsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductsServer will
// result in compilation errors.
type UnsafeProductsServer interface {
	mustEmbedUnimplementedProductsServer()
}

func RegisterProductsServer(s grpc.ServiceRegistrar, srv ProductsServer) {
	s.RegisterService(&Products_ServiceDesc, srv)
}

func _Products_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).CreateProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetbyIdProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetbyIdProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_GetbyIdProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetbyIdProduct(ctx, req.(*CreateProductResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetAllProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProductEmpty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductsServer).GetAllProducts(m, &productsGetAllProductsServer{ServerStream: stream})
}

type Products_GetAllProductsServer interface {
	Send(*Product) error
	grpc.ServerStream
}

type productsGetAllProductsServer struct {
	grpc.ServerStream
}

func (x *productsGetAllProductsServer) Send(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

func _Products_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).DeleteProduct(ctx, req.(*CreateProductResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// Products_ServiceDesc is the grpc.ServiceDesc for Products service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Products_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Products",
	HandlerType: (*ProductsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _Products_CreateProduct_Handler,
		},
		{
			MethodName: "GetbyIdProduct",
			Handler:    _Products_GetbyIdProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Products_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _Products_DeleteProduct_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllProducts",
			Handler:       _Products_GetAllProducts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/productproto/product.proto",
}
